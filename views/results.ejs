<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Results</title>
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        th {
            cursor: pointer;
        }
        th.sorted-asc::after {
            content: " ▲";
        }
        th.sorted-desc::after {
            content: " ▼";
        }
        .container {
            max-width: 1000px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>    
</head>
<body>
    <div class="container">
        <h1>Sentiment Analysis Results</h1>
        <div class="tab-buttons">
            <button onclick="showTab('table-tab')">Table</button>
            <button onclick="showTab('graphs-tab')">Graphs</button>
        </div>
        <div id="table-tab" class="tab active">
            <table id="articles-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Title</th>
                        <th>Polarity</th>
                        <th>Subjectivity</th>
                    </tr>
                </thead>
                <tbody>
                    <% tables.forEach(function(article) { %>
                        <tr>
                            <td><%= article.date %></td>
                            <td><%= article.title %></td>
                            <td><%= article.polarity %></td>
                            <td><%= article.subjectivity %></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <div id="graphs-tab" class="tab">
            <div id="polarity-graph" style="width:100%;height:400px;"></div>
            <div id="subjectivity-graph" style="width:100%;height:400px;"></div>
        </div>
    </div>
    <script>
        function showTab(tabId) {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');

            // Load graphs when the graphs tab is shown
            if (tabId === 'graphs-tab') {
                loadGraphs();
            }
        }

        function loadGraphs() {
            console.log('Loading graphs...'); // Debugging log
            try {
                /*var graphPolarityString = '<%- JSON.stringify(graphPolarity) %>';
                var graphSubjectivityString = '<%- JSON.stringify(graphSubjectivity) %>';*/
                
                var graphPolarity = JSON.parse('{graphPolarity}');
                var graphSubjectivity = JSON.parse('{graphSubjectivity}');
                console.log('Graph Polarity:', graphPolarity); // Debugging log
                console.log('Graph Subjectivity:', graphSubjectivity); // Debugging log
                
                Plotly.newPlot('polarity-graph', graphPolarity.data, graphPolarity.layout, {responsive: true});
                Plotly.newPlot('subjectivity-graph', graphSubjectivity.data, graphSubjectivity.layout, {responsive: true});
            } catch (e) {
                console.error("Error parsing graph data:", e);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Sorting functionality for Polarity and Subjectivity
            const originalRows = Array.from(document.querySelectorAll('#articles-table tbody tr'));
            const headers = document.querySelectorAll('#articles-table th');
            const sortableHeaders = ['Polarity', 'Subjectivity'];
            headers.forEach(header => {
                if (sortableHeaders.includes(header.innerText)) {
                    header.addEventListener('click', function() {
                        const table = header.closest('table');
                        const tbody = table.querySelector('tbody');
                        const index = Array.prototype.indexOf.call(header.parentElement.children, header);
                        const currentOrder = header.dataset.order || 0;
                        const order = (parseInt(currentOrder) + 1) % 3;
                        header.dataset.order = order;

                        if (order === 0) {
                            tbody.innerHTML = '';
                            originalRows.forEach(row => tbody.appendChild(row));
                            headers.forEach(th => th.classList.remove('sorted-asc', 'sorted-desc'));
                            return;
                        }

                        const rows = Array.from(tbody.querySelectorAll('tr'));

                        rows.sort((rowA, rowB) => {
                            const cellA = rowA.children[index].innerText.toLowerCase();
                            const cellB = rowB.children[index].innerText.toLowerCase();

                            const cellANum = parseFloat(cellA);
                            const cellBNum = parseFloat(cellB);

                            if (!isNaN(cellANum) && !isNaN(cellBNum)) {
                                return (cellANum - cellBNum) * (order === 1 ? 1 : -1);
                            } else {
                                return cellA.localeCompare(cellB) * (order === 1 ? 1 : -1);
                            }
                        });

                        rows.forEach(row => tbody.appendChild(row));

                        // Remove existing sort indicators
                        headers.forEach(th => th.classList.remove('sorted-asc', 'sorted-desc'));

                        // Add sort indicator
                        if (order === 1) {
                            header.classList.add('sorted-asc');
                        } else if (order === 2) {
                            header.classList.add('sorted-desc');
                        }
                    });
                }
            });
        });
    </script>    
</body>
</html>
